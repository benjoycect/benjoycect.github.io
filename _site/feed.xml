<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benjamin Joyce&#39;s blog</title>
    <description>Posts about the web, business, and other stuff I do in my free time.</description>
    <link>http://yourdomain.com//</link>
    <atom:link href="http://yourdomain.com//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 25 Jul 2015 23:12:29 -0400</pubDate>
    <lastBuildDate>Sat, 25 Jul 2015 23:12:29 -0400</lastBuildDate>
    <generator>Jekyll v2.5.2</generator>
    
      <item>
        <title>My CSS Mistakes</title>
        <description>&lt;p&gt;For a long time CSS was really confusing to me. I was shocked after every line of code I wrote. Text flowed outside its container, things didn&amp;#39;t position themselves like I expected, and elements I expected to be center sat on the left side of the page. These problems left my CSS with &lt;code&gt;!important&lt;/code&gt; declarations and hacks to make things look right. This is my post that would have taught past me how to fix those mistakes and where to get more information. Maybe you have the same problems and this post will help you too.&lt;/p&gt;

&lt;h2&gt;Height&lt;/h2&gt;

&lt;p&gt;The other day a friend asked me why part of the text in one of his text inputs was hidden. He accidently set a height on his &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements. This isn&amp;#39;t a problem unique to first-time front-end developers. It feels good to set a height on elements. However, setting an explicit height can cause trouble later if you&amp;#39;re not careful.&lt;/p&gt;

&lt;p&gt;First, let take a look at my friend&amp;#39;s example with the &lt;code&gt;input&lt;/code&gt; (note that you won&amp;#39;t notice anything wrong in Chrome or desktop Safari, but keep reading).&lt;/p&gt;

&lt;p&gt;&lt;select style=&quot;font-size:20px; height: 18px; margin-left: 40%; width: 20%;&quot;&gt;
  &lt;option&gt;Apples&lt;/option&gt;
  &lt;option&gt;Oranges&lt;/option&gt;
  &lt;option&gt;Banannas&lt;/option&gt;
&lt;/select&gt;&lt;/p&gt;

&lt;p&gt;To understand what is happening we need to get into the box model. If you&amp;#39;ve never heard of the box model, stop and read &lt;a href=&quot;https://css-tricks.com/the-css-box-model/&quot;&gt;The CSS Box Model&lt;/a&gt; on CSS-Tricks. When content is driving the size of the box, padding, border, and margin are calculated based on the edges of the content.&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;16322&quot; data-slug-hash=&quot;986e518c542049dca4bdcf80c5b6a73e&quot; data-default-tab=&quot;result&quot; data-user=&quot;benjoyce&quot; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/benjoyce/pen/986e518c542049dca4bdcf80c5b6a73e/&#39;&gt;Normal Box&lt;/a&gt; by Ben Joyce (&lt;a href=&#39;http://codepen.io/benjoyce&#39;&gt;@benjoyce&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Setting an explicit height ignores the content and will make the box the size set in the CSS. I didn&amp;#39;t change the padding, border, or margin from the previous example. I did add a height. You can see that the content is now overflowing from the box (that is because the &lt;a href=&quot;https://bocoup.com/weblog/new-overflow-default/&quot;&gt;default&lt;/a&gt; is &lt;code&gt;overflow: visible&lt;/code&gt;). Additionally, the bottom border and the bottom margin are being calculated based on the new position of the bottom of the box.&lt;/p&gt;

&lt;p data-height=&quot;216&quot; data-theme-id=&quot;16322&quot; data-slug-hash=&quot;cd4f283aaff1e8ec3515ef2f84608b6e&quot; data-default-tab=&quot;result&quot; data-user=&quot;benjoyce&quot; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/benjoyce/pen/cd4f283aaff1e8ec3515ef2f84608b6e/&#39;&gt;Height Box&lt;/a&gt; by Ben Joyce (&lt;a href=&#39;http://codepen.io/benjoyce&#39;&gt;@benjoyce&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;But let&amp;#39;s say you know you need something to be a certain height. There are a few options. First, you can use the &lt;code&gt;overflow&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/overflow&quot;&gt;property&lt;/a&gt;. Setting &lt;code&gt;overflow-y&lt;/code&gt; to &lt;code&gt;scroll&lt;/code&gt; might be a tempting solution in our example above. This solution should be avoided in most situations. Imagine scrolling down a webpage only to be stuck in a content box that has its own scroll. An &lt;a href=&quot;http://ux.stackexchange.com/questions/58499/in-page-scrollbars-yes-or-no-or-maybe/#answer-58551&quot;&gt;answer&lt;/a&gt; by &lt;a href=&quot;http://ux.stackexchange.com/users/21165/alexeypegov&quot;&gt;alexeypegov&lt;/a&gt; on UX StackExchange has some good examples of when it might be okay to use &lt;code&gt;overflow-y: scroll&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;
    You may use nested scrolling panes if they&#39;re shown temporary (like in Facebook example you&#39;ve mentioned in your question: the scrolling list in popup which is shown for a moment and will not break the page scrolling itself).
    &lt;/li&gt;
    &lt;li&gt;
    Editable areas like comments may be scrolled while being edited (and reverted back to non-scrollable mode then editing is done).
    &lt;/li&gt;
    &lt;li&gt;
    Web apps which may occupy the whole browser window and avoid scrolling of the content by using dynamic layout so it&#39;s OK to use nested scrolling panes (since main content area could never be scrolled anyway).
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Besides overflow, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes&quot;&gt;flexbox&lt;/a&gt; solves many challenges developers have with height. For example, equal height columns can be done with only &lt;a href=&quot;http://clearleft.com/thinks/270&quot;&gt;one line of code&lt;/a&gt;.&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;16322&quot; data-slug-hash=&quot;949835e2077b5e45aab26aadc2967c71&quot; data-default-tab=&quot;result&quot; data-user=&quot;benjoyce&quot; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/benjoyce/pen/949835e2077b5e45aab26aadc2967c71/&#39;&gt;Equal Height Columns&lt;/a&gt; by Ben Joyce (&lt;a href=&#39;http://codepen.io/benjoyce&#39;&gt;@benjoyce&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;You can also consider letting the height be driven by the content. The W3C specs are basically written to support content-driven boxes. Letting the content drive the height will save you many headaches down the road.&lt;/p&gt;

&lt;p&gt;Finally, you can set a height that fits your content. The most important thing is being intentional with height. Knowing how setting a height will affect your site is powerful knowledge.&lt;/p&gt;

&lt;h2&gt;Position&lt;/h2&gt;

&lt;p&gt;Document flow is tied with the box model for the CSS concepts I think are most important. Tuts+ has a great article on normal document flow, &lt;a href=&quot;http://webdesign.tutsplus.com/articles/quick-tip-utilizing-normal-document-flow--webdesign-8199&quot;&gt;Quick Tip: Utilizing Normal Document Flow&lt;/a&gt;. In the article they describe normal document flow as&lt;/p&gt;

&lt;blockquote&gt;
[H]ow a page is presented when you do nothing to it with regard to structural styling.&lt;/blockquote&gt;

&lt;p&gt;The &lt;a href=&quot;http://info.cern.ch/hypertext/WWW/TheProject.html&quot;&gt;first web page&lt;/a&gt; is a great example of normal document flow. You can see that nothing sits on the same line as the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; of the page. The default display value for a &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is &lt;code&gt;block&lt;/code&gt;. The inverse is true for the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags that appear within the first paragraph. &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags have a default display value of &lt;code&gt;inline&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Confusion can occur when things are both in the normal document flow and outside of it. Not understanding this property may result in undesirerable results. For example, you will be disappointed if you add an absolutely positioned logo at the top of the page and expect your navigation to sit next to the logo.&lt;/p&gt;

&lt;p data-height=&quot;234&quot; data-theme-id=&quot;16322&quot; data-slug-hash=&quot;30cff6e84d84ee78728ad4509720fe37&quot; data-default-tab=&quot;result&quot; data-user=&quot;benjoyce&quot; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/benjoyce/pen/30cff6e84d84ee78728ad4509720fe37/&#39;&gt;30cff6e84d84ee78728ad4509720fe37&lt;/a&gt; by Ben Joyce (&lt;a href=&#39;http://codepen.io/benjoyce&#39;&gt;@benjoyce&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Whoops, why are things sitting on top of each other? Well, elements in the normal document flow are ignoring the heart logo since it was taken out of the normal document flow.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/guilh&quot;&gt;Guil  Hernandez&amp;#39;s&lt;/a&gt; course on &lt;a href=&quot;teamtreehouse.com&quot;&gt;Treehouse&lt;/a&gt;, &lt;a href=&quot;http://teamtreehouse.com/library/css-layout-techniques&quot;&gt;CSS Layout Techniques&lt;/a&gt; is one of the best explanations for layout complexities that I have come across. Treehouse costs a few bucks a month, but it worth the price of admission. Consider taking his course if you find stuff isn&amp;#39;t laying out like you want.&lt;/p&gt;

&lt;h2&gt;Center Alignment&lt;/h2&gt;

&lt;p&gt;Center alignment was one of those things that I had to look up every time for a long time. Not even vertical alignment, which can be solved &lt;a href=&quot;http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/&quot;&gt;in three lines&lt;/a&gt; or &lt;a href=&quot;https://philipwalton.github.io/solved-by-flexbox/demos/vertical-centering/&quot;&gt;by flexbox&lt;/a&gt;. There are a bunch of techniques for centering. Each is used for different situations.&lt;/p&gt;

&lt;p&gt;There are four basic ways to horizontally center items:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For block-level containers &lt;a href=&quot;https://css-tricks.com/almanac/properties/t/text-align/&quot;&gt;text-align: center;&lt;/a&gt; will center that container&amp;#39;s inline or inline-block elements&lt;/li&gt;
&lt;li&gt;For absolutely positioned elements with a known or unknown width &lt;a href=&quot;https://teamtreehouse.com/forum/centre-align-an-absolute-positioned-element-with-unknown-width&quot;&gt;left: 0; right: 0; margin-left: auto; margin-right: auto;&lt;/a&gt; will center that element&lt;/li&gt;
&lt;li&gt;For block-level elements with a width margin-left: auto; margin-right: auto; will center that element and its content&lt;/li&gt;
&lt;li&gt;For parent elements that are &lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;display: flex;&lt;/a&gt;, justify-content: center; will center all child elements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is everything in action:&lt;/p&gt;

&lt;p data-height=&quot;156&quot; data-theme-id=&quot;16322&quot; data-slug-hash=&quot;3b11a5a3f76e7b2c461fc72406647957&quot; data-default-tab=&quot;result&quot; data-user=&quot;benjoyce&quot; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/benjoyce/pen/3b11a5a3f76e7b2c461fc72406647957/&#39;&gt;3b11a5a3f76e7b2c461fc72406647957&lt;/a&gt; by Ben Joyce (&lt;a href=&#39;http://codepen.io/benjoyce&#39;&gt;@benjoyce&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;For more on centering, check out &lt;a href=&quot;https://css-tricks.com/centering-css-complete-guide/_&quot;&gt;Centering in CSS: A Complete Guide&lt;/a&gt; on CSS-Tricks.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Even the most simple display tasks can be difficult in CSS. Don&amp;#39;t worry if you have to look up how to do something once or twenty times. Everyone is learning together. Visit the sites I link to throughout this article if you&amp;#39;re having any of these problems. Or contact me on Twitter &lt;a href=&quot;https://twitter.com/BenJoyceCT&quot;&gt;@BenJoyceCT&lt;/a&gt; and I can try to help. Let me know if you notice any issues with the article. Best of luck!&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com//2015/07/25/css-mistkaes.html</link>
        <guid isPermaLink="true">http://yourdomain.com//2015/07/25/css-mistkaes.html</guid>
        
        
      </item>
    
      <item>
        <title>Tools I Use: Pocket</title>
        <description>&lt;p&gt;I&amp;#39;ve tried all sorts of tools to help me save and organize links. Recently, I started using &lt;a href=&quot;https://getpocket.com&quot;&gt;Pocket&lt;/a&gt;. The app has been around since 2007 (previously known as Read it Later). I&amp;#39;m happy to be a late adopter as it is now integrated into all the applications I could possibly imagine.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;ve ever wanted to save a link from &lt;a href=&quot;http://help.getpocket.com/customer/portal/articles/482762-how-to-save-from-twitter-for-iphone&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;https://getpocket.com/chrome/&quot;&gt;Chrome&lt;/a&gt;, or any of the other &lt;a href=&quot;https://getpocket.com/apps/&quot;&gt;500 supported apps&lt;/a&gt;, give Pocket a try.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com//2015/07/15/tools-i-use.html</link>
        <guid isPermaLink="true">http://yourdomain.com//2015/07/15/tools-i-use.html</guid>
        
        
      </item>
    
      <item>
        <title>How I Built It: Fourth of July</title>
        <description>&lt;p&gt;This is the first of my planned &amp;quot;walk through&amp;quot; posts. Today I&amp;#39;m writing about the process I went through to create the pen I made for the Fourth of July.&lt;/p&gt;

&lt;p&gt;I learned a few key points during this exercise. You can skip ahead to one of them if you&amp;#39;re interested.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#design&quot;&gt;Picking colors and a design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#fill&quot;&gt;SVG fill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#loop&quot;&gt;Sass loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shadow&quot;&gt;filter: drop-shadow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we dive in, here is the final:
&lt;p data-height=&quot;809&quot; data-theme-id=&quot;16322&quot; data-slug-hash=&quot;gpvzNK&quot; data-default-tab=&quot;result&quot; data-user=&quot;benjoyce&quot; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/benjoyce/pen/gpvzNK/&#39;&gt;Fourth of July&lt;/a&gt; by Ben Joyce (&lt;a href=&#39;http://codepen.io/benjoyce&#39;&gt;@benjoyce&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Okay, cool. Go America! Let&amp;#39;s learn something.&lt;/p&gt;

&lt;h3 id=&quot;design&quot;&gt;Picking colors and a design&lt;/h3&gt;

&lt;p&gt;Inspiration for this pen came from a question asked at trivia last week. The final question asked us to list 11 of the 13 original US colonies. We were able to do it, but I struggled more than I thought I would. So I decided my next SVG exercise would also be a history lesson.&lt;/p&gt;

&lt;p&gt;I started by finding a &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Blank_US_Map.svg&quot;&gt;US map&lt;/a&gt;. The &lt;a href=&quot;https://commons.wikimedia.org/wiki/Main_Page&quot;&gt;Wikipedia Commons&lt;/a&gt; has a ton of SVG files. Although they are a good starting point, most of them are not optimized. This particular file is massive. 79kb for one SVG probably means that there are a ton of points. The computer has to calculate and display each point. More calculations means more tax on your processor. Going to production with a file this large may result in a negative experience for your users. &lt;a href=&quot;https://css-tricks.com/video-screencasts/137-svg-is-for-everybody/&quot;&gt;SVG is for everybody&lt;/a&gt;, but be careful.&lt;/p&gt;

&lt;p&gt;Once I had the map I had to figure out what I wanted to do with it. I dropped it in CodePen and started messing around. For these types of fun exercises I often go to  &lt;a href=&quot;https://dribbble.com/&quot;&gt;Dribbble&lt;/a&gt; and look for inspiration. I typed &amp;quot;USA&amp;quot; into the search bar on Dribbble and started flipping through examples. I lifted the red in my example from &lt;a href=&quot;https://dribbble.com/zgraham&quot;&gt;Zach Grahm&amp;#39;s&lt;/a&gt; shot, &lt;a href=&quot;https://dribbble.com/shots/973557-That-One-Place&quot;&gt;That One Place&lt;/a&gt;. I tried filling the background with red, but that looked pretty junky with the map on top. I held onto the red until I knew exactly what I was doing with the map.&lt;/p&gt;

&lt;p&gt;I couldn&amp;#39;t find anything on the web that gave me inspiration for how to fill the states. I decided that the stars from the flag would look cool. I created a small SVG file containing a star on a blue background. I played with the colors I had chosen in Illustrator to make sure that they would work well together. From there I had to figure out how to get the stars into the states.&lt;/p&gt;

&lt;h3 id=&quot;fill&quot;&gt;SVG Fill&lt;/h3&gt;

&lt;p&gt;If you have used an SVG then you have used the &lt;code&gt;fill&lt;/code&gt; property. &lt;code&gt;Fill&lt;/code&gt; determines what happens inside of the thing that is defined by points. Right or wrong, I think of &lt;code&gt;fill&lt;/code&gt; in the same way I think of &lt;code&gt;background&lt;/code&gt; in CSS. If you&amp;#39;re just working with a color, then &lt;code&gt;fill&lt;/code&gt; is pretty similar to &lt;code&gt;background&lt;/code&gt;. However, things get a little different once you start introducing images.&lt;/p&gt;

&lt;p&gt;The first thing to know is that the definition of your image source must happen in the &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; tag. &lt;code&gt;&amp;lt;defs&lt;/code&gt; are inserted right after the opening &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; tag. Here is how my &lt;code&gt;&amp;lt;defs&lt;/code&gt; looks:
&lt;pre&gt;
&lt;code&gt;
&amp;lt;defs&amp;gt;
    &amp;lt;pattern height=&amp;quot;150&amp;quot; id=&amp;quot;img1&amp;quot; patternUnits=&amp;quot;userSpaceOnUse&amp;quot; width=&amp;quot;150&amp;quot;&amp;gt;
      &amp;lt;image height=&amp;quot;150&amp;quot; width=&amp;quot;150&amp;quot; x=&amp;quot;0&amp;quot; xlink:href=&amp;quot;https://s3-us-west-2.amazonaws.com/s.cdpn.io/97391/star.svg&amp;quot; y=&amp;quot;0&amp;quot;/&amp;gt;
    &amp;lt;/pattern&amp;gt;
  &amp;lt;/defs&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;There are four key pieces of the &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; definition to focus on. The first is the pattern &lt;code&gt;height&lt;/code&gt; and &lt;/code&gt;width&lt;/code&gt;. You can think of these definitions as the size of the container that the image sits in. If you set the size of the pattern to anything larger than the size of the &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt; there will be extra space around the image. I wanted the stars to be tight against each other. To make sure there was no extra space I set the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; of the pattern and the image to the exact same value. You&amp;#39;ll notice that these values do not have any unit definitions. Unit-less size definitions default to pixels throughout different parts of SVG markup.&lt;/p&gt;

&lt;p&gt;An &lt;code&gt;id&lt;/code&gt; must be defined for the pattern. The &lt;code&gt;id&lt;/code&gt; is used later to reference the pattern from the &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; definition. I happened to use CSS to set the fill of the states. You will be able to reference the &lt;code&gt;id&lt;/code&gt; from the CSS and the browser will know what to do with it.&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
.state {
  fill: url(#img1);
  fill-opacity: 0;
  stroke:#f5f5f5;
  stroke-width:1;
  stroke-opacity:1;
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;This is a good time to mention an interesting feature about using patterns for fills in SVG. The pattern will repeat itself how you would expect. In my SVG file there are multiple states. Each state has a separate &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; definition. Still, the single image defined in the pattern repeats itself across the patterns to form one, cohesive pattern. I don&amp;#39;t know the technical details on how it works, but it does and it&amp;#39;s cool.&lt;/p&gt;

&lt;p&gt;The final thing I thought about in the definition is the &lt;code&gt;xlink:href&lt;/code&gt;. The source can be any image file type that you would expect (.svg, .jpg, .png, etc.).&lt;/p&gt;

&lt;p&gt;Just for reference, I dug into info on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Patterns&quot;&gt;MDN&lt;/a&gt; and a question someone answered on &lt;a href=&quot;http://stackoverflow.com/questions/3796025/fill-svg-path-element-with-a-background-image&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;loop&quot;&gt;Sass Loops&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://thesassway.com/intermediate/if-for-each-while&quot;&gt;Control directives&lt;/a&gt; are one of my favorite reasons for using Sass. I have found &lt;code&gt;for&lt;/code&gt; loops to be particularly useful. In this example I wanted to add a short time delay between each state increasing its &lt;code&gt;fill-opacity&lt;/code&gt;. There are a few ways to get this result. You could add a different class to each state and set the &lt;code&gt;animation-delay&lt;/code&gt; to a slightly different value for each. That would be messy and take too much time.&lt;/p&gt;

&lt;p&gt;The better option is to use &lt;a href=&quot;https://css-tricks.com/the-difference-between-nth-child-and-nth-of-type/&quot;&gt;nth-of-type&lt;/a&gt; combined with a &lt;code&gt;for&lt;/code&gt; loop. The loop I set up goes through each element with the class &lt;code&gt;state&lt;/code&gt;. During the loop &lt;code&gt;$i&lt;/code&gt; gets updated by 1. We can use the variable in multiple places. I use the same variable that gets updated during the loop to change the number in the &lt;code&gt;nth-of-type&lt;/code&gt; psuedo class. I also use the variable in the &lt;code&gt;animation-delay&lt;/code&gt; equation.&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
@for $i from 1 through $states {
  .state:nth-of-type(#{$i}){
    animation: flash 1s linear 1 forwards;
    animation-delay: ($i*0.15)+s;
  }
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;I think finding good ways to use control directives is the main benefit of these creative exercises. They allow you to think analytically and build good foundations for programming in the future.&lt;/p&gt;

&lt;h3 id=&quot;shadow&quot;&gt;Filter: drop-shadow&lt;/h3&gt;

&lt;p&gt;I never used the &lt;code&gt;drop-shadow&lt;/code&gt; property before this exercise. It&amp;#39;s an awesome way to do what you hoped &lt;code&gt;box-shadow&lt;/code&gt; would do on your SVG. The difference is &lt;code&gt;drop-shadow&lt;/code&gt; calculates the area of the element it is being applied to and acts accordingly.&lt;/p&gt;

&lt;p&gt;You&amp;#39;ll notice that in the example the shadow fits nicely around each state. Unfortunately that calculation comes at a processing cost. When I had the &lt;code&gt;drop-shadow&lt;/code&gt; being applied immediately to each state it basically crashed the browser. That is because the browser was calculating where to put the points in the SVG, calculating the points that the drop shadow needed to go around, and running an animation. Even on my high-end device there were problems.&lt;/p&gt;

&lt;p&gt;To fix the problem I added an animation to the drop shadow that was delayed by the time it took to fill each state plus a few milliseconds. The whole example is still expensive, but the delay helped quite a bit.&lt;/p&gt;

&lt;h3&gt;Final Thoughts&lt;/h3&gt;

&lt;p&gt;If someone ever wanted a similar graphic on their site there are a few things to think about. The first, and most important, is the size of the SVG. The map does not need to be nearly as precise as the one I used. Think about using your design chops to find a solution that is smaller but conveys the same message. The other thing to remember is that some of this stuff is experimental. For example, &lt;code&gt;filter&lt;/code&gt; seems to be forever messed up in IE. Always check &lt;a href=&quot;caniuse.com&quot;&gt;Can I Use&lt;/a&gt; before using any experimental properties.&lt;/p&gt;

&lt;p&gt;Let me know if you need help with anything I mentioned above. Also, please let me know if you think something is inaccurate and I&amp;#39;ll fix it. The best way to reach me is on Twitter &lt;a href=&quot;https://twitter.com/BenJoyceCT&quot;&gt;@BenJoyceCT&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com//2015/07/05/how-i-built-it.html</link>
        <guid isPermaLink="true">http://yourdomain.com//2015/07/05/how-i-built-it.html</guid>
        
        
      </item>
    
      <item>
        <title>Fourth of July</title>
        <description>&lt;p&gt;Have a fun an safe Fourth of July. I stayed up way to late making a Pen to celebrate! Expect an article that deconstructs how I made it tomorrow.&lt;/p&gt;

&lt;p data-height=&quot;821&quot; data-theme-id=&quot;16322&quot; data-slug-hash=&quot;gpvzNK&quot; data-default-tab=&quot;result&quot; data-user=&quot;benjoyce&quot; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/benjoyce/pen/gpvzNK/&#39;&gt;Fourth of July&lt;/a&gt; by Ben Joyce (&lt;a href=&#39;http://codepen.io/benjoyce&#39;&gt;@benjoyce&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Jul 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com//2015/07/04/fourth-of-july.html</link>
        <guid isPermaLink="true">http://yourdomain.com//2015/07/04/fourth-of-july.html</guid>
        
        
      </item>
    
      <item>
        <title>One Dish. One Fork. One Spoon.</title>
        <description>&lt;p&gt;I&amp;#39;ve started something new that has made life easier. The second I use a dish or silverware I wash it and put it back. It takes about two minutes and thirty seconds each time I hand wash the dishes from the previous meal. I&amp;#39;ve learned a valuable lesson from this new habit. It&amp;#39;s a lesson that can be pulled directly from the lean manufacturing handbook: flow can work better than batch.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not an expert on lean, but I want to recommend &lt;a href=&quot;lean.org&quot;&gt;lean.org&lt;/a&gt;. It&amp;#39;s not the best looking site I read, but it has some of the best content. It&amp;#39;s a great place to start learning about lean. Actually implementing lean in any process is extremely hard. Even my little dish washing example takes a ton of mental effort to overcome the wonderful feeling of procrastination.&lt;/p&gt;

&lt;p&gt;The best we can do is be prepared. Keep up the good work.&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com//2015/06/30/one-plate-one-fork.html</link>
        <guid isPermaLink="true">http://yourdomain.com//2015/06/30/one-plate-one-fork.html</guid>
        
        
      </item>
    
      <item>
        <title>The Logo</title>
        <description>&lt;p&gt;&amp;quot;Is it a bikini?&amp;quot; &amp;quot;No mom, it&amp;#39;s supposed to be a tiger.&amp;quot;&lt;/p&gt;

&lt;p&gt;I decided to create a logo for my site. This first iteration of the site is bare by design. I&amp;#39;m hoping that people focus on the words and examples in the posts, but I wanted to add some other interesting elements. That is where the logo comes in. I guess the meaning of the logo is up for interpretation. For example, my mom first guessed it was a bikini, then a cat, then landed on tiger. I think of it as a tiger.&lt;/p&gt;

&lt;p&gt;Tigers were my favorite animal growing up. I just thought they were cool. I collected a bunch of weird tiger stuff: figurines, piggy banks, porcelain plates. I&amp;#39;m not that into tigers any more. Still, if I was to cast a Patronus Charm it would definitely be a tiger. So that&amp;#39;s where I landed and I started to sketch.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll often do sketching on a piece of paper. Other times I like to mess around with geometric shapes in Illustrator and see what I come up with. I chose the computer to sketch out ideas for the logo of this site. First I started with a couple basic shapes for the head. To do this I used a combination of the pen tool and shape builder tool. I find it easier to duplicate half of a path, flip it, and join the paths for symmetrical drawings. It only took a few tries to get the head look the way I wanted. From there I messed around with different triangles and lines until I had something I thought looked cool.&lt;/p&gt;

&lt;p&gt;The colors were the most important part of the logo to me. I knew I wanted contrasting colors that I could use throughout the site. Luckily tigers are orange and that pairs well with blue when done right. I went for a highly saturated orange as the base. I knew most of the site would be white and gray so I wanted the logo to pop. The blue is much less saturated. There was a highly saturated blue and orange house in the town I grew up in. Ever since the first time I saw that house I have been extremely careful mixing those two colors together. The result was pleasing to my eye and paired well with the blue I was using for my links.&lt;/p&gt;

&lt;p&gt;The logo isn&amp;#39;t the best thing I&amp;#39;ve done, but I like it. It definitely has my illustration style. It&amp;#39;s also easy to manipulate and build on. For example, I created a pen that simulates 3-D:&lt;/p&gt;

&lt;p data-height=&quot;561&quot; data-theme-id=&quot;16322&quot; data-slug-hash=&quot;gpoRLM&quot; data-default-tab=&quot;result&quot; data-user=&quot;benjoyce&quot; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/benjoyce/pen/gpoRLM/&#39;&gt;Fake 3d&lt;/a&gt; by Ben Joyce (&lt;a href=&#39;http://codepen.io/benjoyce&#39;&gt;@benjoyce&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t have a use for this particular pen right now, but it made me realize I can use this image for different demos. Perhaps the little tiger has more 3-D or animated adventures in his future. Or perhaps he stays as a link to the homepage.&lt;/p&gt;

&lt;p&gt;Let me know what you think! You can find me on Twitter &lt;a href=&quot;https://twitter.com/BenJoyceCT&quot;&gt;@BenJoyceCT&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com//2015/06/29/the-logo.html</link>
        <guid isPermaLink="true">http://yourdomain.com//2015/06/29/the-logo.html</guid>
        
        
      </item>
    
      <item>
        <title>Style Guides At Huge, Old Companies Are Really Hard</title>
        <description>&lt;p&gt;A bunch has been written about front-end style guides. Anna Debenham has provided the most on the subject. Her site, &lt;a href=&quot;http://styleguides.io/&quot;&gt;styleguides.io&lt;/a&gt;, is the best place for style guide resources. I have a perspective on style guides at huge, old companies. It&amp;#39;s one you may have heard before, but I think it&amp;#39;s worth sharing. &lt;em&gt;Implementing a style guide is hard.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To explore why style guides are so difficult we&amp;#39;ll look at a theoretical time line for a Fortune 100 financial services company. Suppose the company that has been around for 200 years. 200 years of sales, accounting, and management. Around 60 years ago those tasks started to be done with a &lt;a href=&quot;http://www.bbc.com/news/magazine-23509153&quot;&gt;computer&lt;/a&gt;. Then, 47 years ago, things on the computer got a little easier thanks to the &lt;a href=&quot;https://www.youtube.com/watch?v=yJDv-zdhzMY&quot;&gt;graphical user interface&lt;/a&gt;. Those working using computers started to get used to the metaphors and interactions introduced in those early systems. 30 years ago, assumptions on how computers should work expanded to nearly everyone. The web &lt;a href=&quot;http://info.cern.ch/hypertext/WWW/TheProject.html&quot;&gt;became a thing&lt;/a&gt; 24 years ago, in 1991. Finally, intranets &lt;a href=&quot;http://www.businessweek.com/1996/09/b34641.htm&quot;&gt;gained popularity&lt;/a&gt; in 1996.&lt;/p&gt;

&lt;p&gt;50 years of history can be felt every day at old, large companies. That is not a reason to run from these types of institutions. Battling technical debt and legacy systems should be part of the design challenge. This might be controversial, but I think creating an all-inclusive style guide at a company of immense size and system history is impossible. At the very least it&amp;#39;s not worth trying to do. Companies that have a history that dates back to the first computer are using systems that couldn&amp;#39;t benefit from a style guide. I hate to say it, but HOST systems are too far gone. The text-based systems likely have very strong patterns that are taught to the users. Companies who have these systems know it is technical debt. If you have to help design something that must be implemented on these systems, do your best and move on.&lt;/p&gt;

&lt;p&gt;So far the bad, but obvious news is that we can&amp;#39;t build a style guide for a text-based system. Desktop applications are a little weird too, but there use a GUI that we&amp;#39;re used to so it should be a little easier to implement style guidelines, right? Right? At this point I would start thinking a little smaller. The web! HOST is toast, desktop is at a rest stop, but the web. I know the web. I love the web! Surely we can build something that wrangles in the spaghetti  styles and implementations across the different web properties.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take a quick inventory of the previously mentioned hypothetical companies web properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An intranet built on an old CMS no one has heard of but each &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; has in-lined styles&lt;/li&gt;
&lt;li&gt;A separate &amp;quot;web portal&amp;quot; for legal, finance, marketing, operations, etc. (times five for the different product lines) all built on different platforms&lt;/li&gt;
&lt;li&gt;A public internet site with 20 separate sites for customers to service one thing or another&lt;/li&gt;
&lt;li&gt;Microsoft SharePoint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After taking a close look at SharePoint most have to put their inventorying on pause for a quick trip to the spa. The large amount of systems is the greatest challenge for developing a front-end style guide. You&amp;#39;ll come across vastly different HTML structures and JavaScript frameworks that were used to implement these different systems. Perhaps more importantly, these systems are used for very different tasks. Trying to implement a style guide for all these existing systems would likely fight against the systems. The style guide should be used as a complementary tool.&lt;/p&gt;

&lt;p&gt;So where do you start? I think the best place to start is the future. Because there are so old systems at these types of companies, it also means there are probably a ton of new projects. Redesign, rewrites, &amp;quot;reimagining,&amp;quot; whatever you want to call them. It&amp;#39;s these nearly &lt;a href=&quot;https://en.wikipedia.org/wiki/Greenfield_project?oldformat=true&quot;&gt;greenfield&lt;/a&gt; projects (at least on the front-end) that you should focus on. I also think that the project should be something of scale and priority. Some may disagree but I think building the style guide shouldn&amp;#39;t be easy. Creating a style guide for one new site for one small department will feel like a style guide for a tiny blog (like this one). If you want this thing to last you have to have the fights and make tough decisions. Maintenance of the project is only going to get tougher. Do something that works well, but makes you really work as a team.&lt;/p&gt;

&lt;p&gt;The other benefit to hitching onto a big project is that there is likely more room for scope and budget. Some of the approaches to building the guides are better than others, at least conceptually. Ian Feather&amp;#39;s post, &lt;a href=&quot;http://ianfeather.co.uk/a-maintainable-style-guide/&quot;&gt;A Maintainable Style Guide&lt;/a&gt;, is a compelling way to get the benefit of the style guide without loosing any development hours. However, getting buy-in isn&amp;#39;t going to be easy. There is never enough time, budget, or scope on any project. I&amp;#39;ll write more about approaches to getting buy-in, but for now let&amp;#39;s just say that the larger project is where you should start.&lt;/p&gt;

&lt;p&gt;Quick aside, you can try to do this off the side-of-your-desk, &lt;a href=&quot;http://alistapart.com/article/building-twitter-bootstrap&quot;&gt;I know Mark Otto did&lt;/a&gt;, but it&amp;#39;s going to be really hard to get it right. The challenge with this approach is time and resources. On my first attempt at this stuff I was able to get a decent static style guide built and launched internally. However, there was no budget and the priority was low. If you go with the Mark Otto approach, make sure you build up a team of people who are as passionate about it as you are. You&amp;#39;ll need a small army to support the project in their valuable free time if you don&amp;#39;t have a budget. Let me know if you do try it and actually get a maintainable work flow.&lt;/p&gt;

&lt;p&gt;So you&amp;#39;ve gotten buy-in from the project stakeholders, the style guide development is being included in the project estimates, and you&amp;#39;ve studied like crazy to ensure the style guide gets built in the best way possible. Be sure to get a seat at the table early in project planning. If you don&amp;#39;t feel like you have the authority to have your voice heard, change your attitude. You&amp;#39;re reading about this stuff and have listened to dozens of others talk about their experience with this same type of effort. Work with your team. You probably have the best knowledge of how others have approached development with front-end style guides. Listen to your team though. They have had experiences with different projects and likely different companies. If they&amp;#39;re negative about something, get to the root-cause of their concern. If they have an idea for a different approach to development, understand why they feel that way and share your opinion.&lt;/p&gt;

&lt;p&gt;These types of exercises have been going on for 50 years. You will be having a new and old conversation at the same time. Learn as much as you can and learn fast. Parts of how your organization implements this system might not work. Hard work now will make for much easier development and maintenance in the future.&lt;/p&gt;

&lt;p&gt;Good luck! Check back here as I&amp;#39;ll be writing about some more specifics around style guide-driven front-end development. Also, let me know if you notice any grammar or spelling mistakes. The best place to get in touch is tweeting me &lt;a href=&quot;https://twitter.com/BenJoyceCT&quot;&gt;@BenJoyceCT&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com//2015/06/28/style-guides-are-hard.html</link>
        <guid isPermaLink="true">http://yourdomain.com//2015/06/28/style-guides-are-hard.html</guid>
        
        
      </item>
    
      <item>
        <title>Four Hundred Four</title>
        <description>&lt;p&gt;The default 404 page of a GitHub pages site has nothing to do with that site. Keeping the default could be confusing for people who go to a page that doesn&amp;#39;t exist. I wanted to create a &lt;a href=&quot;http://benjaminjoyce.com/404&quot;&gt;404 page&lt;/a&gt; that made it easy for visitors to get back to a familiar place. I also wanted to add a little personality to that page. Here is how I did it.&lt;/p&gt;

&lt;p&gt;First, I found the official &lt;a href=&quot;https://help.github.com/articles/custom-404-pages/&quot;&gt;documentation&lt;/a&gt; on GitHub. I got the page running locally and started to think about what I wanted to put up. There was an old &lt;a href=&quot;http://codepen.io/benjoyce/pen/myqxad&quot;&gt;pen&lt;/a&gt; that featured an SVG illustration I did of Beaker from the Muppets.&lt;/p&gt;

&lt;p data-height=&quot;673&quot; data-theme-id=&quot;16322&quot; data-slug-hash=&quot;myqxad&quot; data-default-tab=&quot;result&quot; data-user=&quot;benjoyce&quot; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/benjoyce/pen/myqxad/&#39;&gt;Beaker&lt;/a&gt; by Ben Joyce (&lt;a href=&#39;http://codepen.io/benjoyce&#39;&gt;@benjoyce&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I wrote a &lt;a href=&quot;http://codepen.io/benjoyce/blog/quick-smil-animation-tip&quot;&gt;post&lt;/a&gt; on my &lt;a href=&quot;http://codepen.io/benjoyce/blog/&quot;&gt;CodePen blog&lt;/a&gt; about the specifics of creating the animations in the pen. You should read that if you&amp;#39;ve never used SMIL before.&lt;/p&gt;

&lt;p&gt;I thought re-purposing that work would be perfect for the 404 page. It is a fun showcase of what is possible with SVG and was a good reflection of my personality. Unfortunately, taking the pen and jamming it onto my site wouldn&amp;#39;t work. The image didn&amp;#39;t look anything like the rest of my site. It also didn&amp;#39;t provide an easy way to include text that would bring the user back to a relevant page. Still, I tried something.&lt;/p&gt;

&lt;p data-height=&quot;674&quot; data-theme-id=&quot;16322&quot; data-slug-hash=&quot;839684737b2e43f6bf64ce133becf63f&quot; data-default-tab=&quot;result&quot; data-user=&quot;benjoyce&quot; class=&#39;codepen&#39;&gt;See the Pen &lt;a href=&#39;http://codepen.io/benjoyce/pen/839684737b2e43f6bf64ce133becf63f/&#39;&gt;Beaker Fork&lt;/a&gt; by Ben Joyce (&lt;a href=&#39;http://codepen.io/benjoyce&#39;&gt;@benjoyce&lt;/a&gt;) on &lt;a href=&#39;http://codepen.io&#39;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I pushed that version and realized quickly that it was weird and would not work. My guess is that most people are going to view my site on a small device. This giant image and overlay text worked, but looked pretty junky.&lt;/p&gt;

&lt;p&gt;The imagine had to be scaled down and fit inside the page. Making the change was a bit of a pain due to my approach to the original build. Each component was its own SVG. I did this so that I could manipulate the position and size with CSS. The new design required the whole scene to scale together. I could have gone through and set everything to get my desired result, but that would have been more effort than just recreating the scene as one SVG.&lt;/p&gt;

&lt;p&gt;So that&amp;#39;s what I did. I do all my SVG illustration in Illustrator. I fired open the program and got to work. After putting the illustration together I exported it over to a pen on CodePen. Seeing changes is helpful to me when working with animations. However, it&amp;#39;s still not ideal. I haven&amp;#39;t come across an easy way to navigate through large SVGs. Figuring out which &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; I should be adding a class to is painful. If you&amp;#39;re working with a large SVG file I think you just have to deal with it. Knowing what the color is for the fill or stroke of the elements within the SVG is the most helpful way to navigate.&lt;/p&gt;

&lt;p&gt;The animations I used were the same as the original pen. I had to make Beaker&amp;#39;s mouth open again, but this time I knew how. One piece I&amp;#39;m still working on is the initial explosion. I left that as a separate SVG. I haven&amp;#39;t fully determined how I want that to look. Right now it explodes in the middle of the screen on some devices and a random place on others. I made sure to set &lt;code&gt;pointer-events: none&lt;/code&gt; on the explosion so the links to the home and about page still worked. Be sure to set your pointer event to none if there is something that takes up the full screen.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m pretty happy with the &lt;a href=&quot;http://benjaminjoyce.com/404&quot;&gt;final result&lt;/a&gt;. I think 404 pages should be unique, but feel cohesive with the rest of the site.&lt;/p&gt;

&lt;p&gt;Let me know if you&amp;#39;ve done something interesting with your 404 page. The best place to get in touch is tweeting me &lt;a href=&quot;https://twitter.com/BenJoyceCT&quot;&gt;@BenJoyceCT&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com//2015/06/27/four-hundred-four.html</link>
        <guid isPermaLink="true">http://yourdomain.com//2015/06/27/four-hundred-four.html</guid>
        
        
      </item>
    
      <item>
        <title>Fridays Are For Starting</title>
        <description>&lt;blockquote&gt;[I]t&#39;s like coming home on Friday night and doing your homework right away so that your Saturday night is free to just party.

&lt;p class=&quot;blockquote__author&quot;&gt;Mike Meyers as Wayne Campbell, Wayne&#39;s World 2&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&amp;#39;t know if I fully subscribe to getting everything done on a Friday. A little procrastination feels so nice after a long week. It&amp;#39;s good to get started on Friday. Like the tell-tale-heart, the post I started today won&amp;#39;t be off my mind until I &lt;code&gt;git push&lt;/code&gt; later this weekend. Starting the post will not make me anxious or stressed. It will just keep me honest.&lt;/p&gt;

&lt;p&gt;Writing every day is going to be hard. I have about one and a half hours a day to write. Writing will fill the short time between running, work, running, and a social life. I think this site will be something I enjoy though. It feels like illustrating, coding, or playing music. The feeling can&amp;#39;t really be described. You can find the emotion somewhere between excitement and happiness. Energy, maybe? I&amp;#39;m not sure. &lt;a href=&quot;http://austinkleon.com/&quot;&gt;Austin Kleon&lt;/a&gt; wrote one of my favorite quotes about this subject.&lt;/p&gt;

&lt;blockquote&gt;Inertia is the death of creativity. You have to stay in the groove. When you get out of the groove, you start to dread the work, because you know it’s going to suck for a while—it’s going to suck until you get back into the flow.

&lt;p class=&quot;blockquote__author&quot;&gt;Austin Kleon. &lt;a href=&quot;http://www.amazon.com/Steal-Like-Artist-Things-Creative/dp/0761169253&quot;&gt;Steal Like an Artist&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think you have to stay busy to be good. Think about lazy Sundays. To me, that is the worst. Nothing is getting done after your legs start to atrophy and brain turns to mush. I was able to crank out half of a decent post and this quick rant in the two hours I had between work and hanging out with friends. I don&amp;#39;t think I&amp;#39;ll produce nearly that much when I&amp;#39;m not busy.&lt;/p&gt;

&lt;p&gt;Okay, get something started, then have fun. Enjoy your weekend.&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com//2015/06/26/fridays-are-for-starting.html</link>
        <guid isPermaLink="true">http://yourdomain.com//2015/06/26/fridays-are-for-starting.html</guid>
        
        
      </item>
    
      <item>
        <title>My Gruntfile</title>
        <description>&lt;p&gt;I&amp;#39;m using some &lt;a href=&quot;http://gruntjs.com/&quot; title=&quot;Grunt&quot;&gt;Grunt&lt;/a&gt; tasks that have helped me get this site running. They have also made my life way easier. A few caveats before we get started. One, I know Grunt isn&amp;#39;t the super cool task runner it was when it was first released. &lt;a href=&quot;http://gulpjs.com/&quot; title=&quot;Gulp&quot;&gt;Gulp&lt;/a&gt; has earned that distinction from most developers I talk to now. &lt;a href=&quot;https://medium.com/@preslavrachev/gulp-vs-grunt-why-one-why-the-other-f5d3b398edc4&quot;&gt;Enough&lt;/a&gt; has been &lt;a href=&quot;http://www.hongkiat.com/blog/gulp-vs-grunt/&quot;&gt;written&lt;/a&gt; about &lt;a href=&quot;http://sixrevisions.com/web-development/grunt-vs-gulp/&quot;&gt;Grunt versus Gulp&lt;/a&gt; that I don&amp;#39;t need to go into that. I&amp;#39;ve tried both. I started with Grunt, thanks to Chris Coyier&amp;#39;s awesome 24 Ways &lt;a href=&quot;http://24ways.org/2013/grunt-is-not-weird-and-hard/&quot;&gt;article&lt;/a&gt;. I like it and I&amp;#39;m staying with it for a while. Another quick note, I have an extremely basic website right now. I haven&amp;#39;t added any images (yet) and there is basically no interactivity. Finally, I&amp;#39;m not going to teach you how to use Grunt. The previously mentioned article by Chris Coyier does it better than I ever could.&lt;/p&gt;

&lt;p&gt;Okay? Good? Let&amp;#39;s see that &lt;code&gt;Gruntfile.js&lt;/code&gt;!
&lt;pre&gt;&lt;code&gt;
module.exports = function(grunt) {
    grunt.initConfig({
      sass: { // Task
        dist: { // Target
          options: { // Target options
            style: &amp;#39;compressed&amp;#39;
          },
          files: { // Dictionary of files
            &amp;#39;css/main.css&amp;#39;: &amp;#39;sass/main.scss&amp;#39; // &amp;#39;destination&amp;#39;: &amp;#39;source&amp;#39;
          }
        }
      },
      svgstore: {
        options: {
          prefix: &amp;#39;shape-&amp;#39;, // This will prefix each &lt;g&gt; ID
        },
        default: {
          files: {
            &amp;#39;img/svgs/svg-defs.svg&amp;#39;: [&amp;#39;img/svg-src/[an asterisk goes here].svg&amp;#39;],
          }
        }
      },
      autoprefixer: {
        dist: {
          files: {
            &amp;#39;css/build/main.css&amp;#39;: &amp;#39;css/main.css&amp;#39;
          }
        }
      },
      criticalcss: {
        custom: {
          options: {
            url: &amp;quot;http://127.0.0.1:4000&amp;quot;,
            width: 3000,
            height: 2000,
            outputfile: &amp;quot;css/build/critical.css&amp;quot;,
            filename: &amp;quot;css/build/main.css&amp;quot;, // Using path.resolve( path.join( ... ) ) is a good idea here
            buffer: 800 * 1024,
            ignoreConsole: false
          }
        }
      },
      watch: {
        files: [&amp;#39;img/svg-src/[an asterisk goes here].svg&amp;#39;, &amp;#39;sass/[an asterisk goes here]&amp;#39;],
        tasks: [&amp;#39;svgstore&amp;#39;, &amp;#39;sass&amp;#39;, &amp;#39;autoprefixer&amp;#39;, &amp;#39;criticalcss&amp;#39;]
      }
    });
    grunt.loadNpmTasks(&amp;#39;grunt-contrib-sass&amp;#39;);
    grunt.loadNpmTasks(&amp;#39;grunt-contrib-watch&amp;#39;);
    grunt.loadNpmTasks(&amp;#39;grunt-svgstore&amp;#39;);
    grunt.loadNpmTasks(&amp;#39;grunt-autoprefixer&amp;#39;);
    grunt.loadNpmTasks(&amp;#39;grunt-criticalcss&amp;#39;);
    grunt.registerTask(&amp;#39;default&amp;#39;, [&amp;#39;sass&amp;#39;, &amp;#39;autoprefixer&amp;#39;, &amp;#39;criticalcss&amp;#39;]);
    };
&lt;/code&gt;&lt;/pre&gt;
So you&amp;#39;ll notice pretty quickly that I&amp;#39;m using five tasks. I&amp;#39;ll talk about each one and the settings that got me confused.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-sass&quot;&gt;grunt-contrib-sass&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I have been writing all my style code in &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; for about two years. If you&amp;#39;re writing your stylesheets in CSS, stop and learn Sass. It will save you a ton of time and your code will be much easier to read. I&amp;#39;m not going to go into the intricacies of Sass. I recommend the courses on &lt;a href=&quot;https://teamtreehouse.com&quot;&gt;Treehouse&lt;/a&gt; if you want to learn Sass.&lt;/p&gt;

&lt;p&gt;Sass is a preprocessor for CSS. Preprocessors introduce a level of abstraction that makes CSS way easier to write.&lt;/p&gt;

&lt;p&gt;Having the abstraction comes at a bit of a cost though because you have to compile it to code that the browser can read. Having a task runner makes compiling the code super easy. After installing grunt-contrib-sass, I went to the &lt;code&gt;files&lt;/code&gt; block and set &lt;code&gt;&amp;#39;css/main.css&amp;#39;: &amp;#39;sass/main.scss&amp;#39;&lt;/code&gt; &lt;code&gt;&amp;#39;css/main.css&amp;#39;&lt;/code&gt; is the final stylesheet that my site uses and &lt;code&gt;&amp;#39;sass/main.scss&amp;#39;&lt;/code&gt;&lt;/pre&gt; is the location of the &lt;code&gt;.scss&lt;/code&gt; file that contains all of the necessary &lt;code&gt;@import&lt;/code&gt; declarations for my Sass partials. Now, this pattern of &lt;code&gt;destination : source&lt;/code&gt; is one I find a little weird, but see in many tasks. I remember by thinking &amp;quot;this thing works by getting stuff from : this thing.&amp;quot; I&amp;#39;m sure there is a good reason for the pattern, but I have no idea.&lt;/p&gt;

&lt;p&gt;The other piece of grunt-contrib-sass that is important is the &lt;code&gt;style&lt;/code&gt; declaration. I started looking all &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; for a good CSS minifyier until I finally realized the Sass task does it for you. Just make the style &lt;code&gt;compressed&lt;/code&gt; and you&amp;#39;re all set. You should minify. No one needs to look at your production stylesheet and it reduces file size a pretty significant amount.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://github.com/FWeinb/grunt-svgstore&quot;&gt;grunt-svgstore&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This method is another Chris Coyier special. Go check out the article about this method, &lt;a href=&quot;https://css-tricks.com/svg-sprites-use-better-icon-fonts/&quot;&gt;Icon System with SVG Sprites&lt;/a&gt;. The article explains about all you need to know. I&amp;#39;ve liked working with this approach. But, I have noticed it&amp;#39;s a little weird to add classes to specific parts of one of the SVGs in the sprite.&lt;/p&gt;

&lt;p&gt;Just be sure to plan ahead before you combine the files into one. You&amp;#39;re production SVG file will be overwritten every time you add a new file. Make sure those classes and animations live in the individual file, pre-combination.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://github.com/nDmitry/grunt-autoprefixer&quot;&gt;grunt-autoprefixer&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The first thing you notice when you get to the page for Autoprefixer is a message to use PostCSS instead. I&amp;#39;ve heard good things about PostCSS, but I haven&amp;#39;t explored it too much yet. It&amp;#39;s on my list of tools to learn more about, but here is what I know: Autoprefixer works.&lt;/p&gt;

&lt;p&gt;Autoprefixer is crucial to making sure my site works on a bunch of different browsers. It uses information from &lt;a href=&quot;http://caniuse.com/&quot;&gt;Can I use...&lt;/a&gt; to determine when to add &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix&quot;&gt;vendor prefixes&lt;/a&gt; to different CSS properties. Use this tool if you want your site to look reasonable in other browsers. It takes almost no extra work (besides testing, you should still be testing).&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://github.com/filamentgroup/grunt-criticalcss&quot;&gt;grunt-criticalcss&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I strongly recommend you read &lt;a href=&quot;https://www.filamentgroup.com/lab/performance-rwd.html&quot;&gt;How we make RWD sites load fast as heck&lt;/a&gt; written by Scott Jehl. It has been about a year since that article came out and I still use many of the ideas from it today. Thinking about critical CSS is one of those ideas.&lt;/p&gt;

&lt;p&gt;Right now, my site is tiny. I&amp;#39;m able to inline my whole style sheet, besides the request for the font files from Google. Still, my the home page still gets delivered in less than 6kb (gzip). I don&amp;#39;t really need to worry about critical CSS right now. Soon my site and stylesheet will get into territory that makes it more than one http request. I have this task running in preparation for that day.&lt;/p&gt;

&lt;p&gt;I do have a few things to say about grunt-criticalcss. It&amp;#39;s not perfect. I set the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; declarations to some pretty massive values. Still, the page still looked super broken on first paint. I recommend using this task as a starting point and then taking a bit of time to use your brain to figure out what else needs to be included inline.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;https://github.com/gruntjs/grunt-contrib-watch&quot;&gt;grunt-contrib-watch&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Having something watch your files is pretty necessary for any task runner. Having Watch running will allow you to not have to worry about typing &lt;code&gt;grunt&lt;/code&gt; every time you want to preview your site.&lt;/p&gt;

&lt;h3&gt;Final Thoughts&lt;/h3&gt;

&lt;p&gt;There are many easier options to get a website up and running. But there is something special about crafting something from nothing and making it yours. Task runners make the process of creating a site &amp;quot;from scratch&amp;quot; much smoother. This is my approach to Grunt and it&amp;#39;s not perfect. Keep an eye on the site for updates about my Grunt process, deeper dives into the reasons for each task, and inevitably, my switch to Gulp.&lt;/p&gt;

&lt;p&gt;If you have any questions or feedback, shoot me a tweet &lt;a href=&quot;https://twitter.com/BenJoyceCT&quot;&gt;@BenJoyceCT&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com//2015/06/25/my-grunt-file.html</link>
        <guid isPermaLink="true">http://yourdomain.com//2015/06/25/my-grunt-file.html</guid>
        
        
      </item>
    
  </channel>
</rss>
